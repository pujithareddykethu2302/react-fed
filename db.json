{
  "challengeInfo": {
    "title": "30 Days React Hands-On Challenge",
    "shortDescription": "A practical 30-day coding challenge to master React step-by-step.",
    "fullDescription": "This 30-day React hands-on challenge is designed to help developers build core React skills by building one small project each day. From beginner-friendly tasks like form validation to advanced topics like drag-and-drop and API integration, each day targets a key concept. By the end of the challenge, you'll have 30 mini React projects and a stronger understanding of real-world application building."
  },
  "days": [
    {
      "id": "1",
      "dayChallenge": "Day 1",
      "title": "JSX & Rendering",
      "shortDescription": "Practice JSX and rendering elements.",
      "longDescription": "Understand JSX syntax and render static elements on the screen. Create a simple functional component and return some HTML elements.",
      "topic": "React - JSX",
      "difficulty": "Easy",
      "timeEstimate": "15–20 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "In Progress"
    },
    {
      "id": "2",
      "dayChallenge": "Day 2",
      "title": "React Props",
      "shortDescription": "Pass props to components.",
      "longDescription": "Create parent and child components. Pass data using props and display them inside the child component.",
      "topic": "React - Props",
      "difficulty": "Easy",
      "timeEstimate": "20–25 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "3",
      "dayChallenge": "Day 3",
      "title": "React useState",
      "shortDescription": "Use state to manage dynamic data.",
      "longDescription": "Learn the `useState` hook to manage state inside a component. Build a simple counter or toggler to practice.",
      "topic": "React - useState",
      "difficulty": "Easy",
      "timeEstimate": "20–25 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "4",
      "dayChallenge": "Day 4",
      "title": "Conditional Rendering",
      "shortDescription": "Show or hide UI based on state.",
      "longDescription": "Use conditional rendering with `if`, ternary operators, or logical &&. Build a simple login/logout toggle.",
      "topic": "React - Conditional Rendering",
      "difficulty": "Easy",
      "timeEstimate": "25–30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "5",
      "dayChallenge": "Day 5",
      "title": "Event Handling",
      "shortDescription": "Handle click and input events.",
      "longDescription": "Learn how to handle user interactions like button clicks and form inputs. Create functions that respond to these events.",
      "topic": "React - Events",
      "difficulty": "Easy",
      "timeEstimate": "20–25 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "6",
      "dayChallenge": "Day 6",
      "title": "Fetch & Display API Data",
      "shortDescription": "Use `useEffect` to call a public API.",
      "longDescription": "Use `fetch()` and `useEffect()` to load data from a public API (e.g., JSONPlaceholder) and display it in a list or card view. Handle loading and error states.",
      "topic": "React - useEffect & API",
      "difficulty": "Easy",
      "timeEstimate": "25–30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "7",
      "dayChallenge": "Day 7",
      "title": "Form Handling",
      "shortDescription": "Handle controlled form inputs.",
      "longDescription": "Create a form with input fields and connect them to state using `useState`. Handle form submission and validation.",
      "topic": "React - Forms",
      "difficulty": "Medium",
      "timeEstimate": "30–40 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "8",
      "dayChallenge": "Day 8",
      "title": "Component Communication",
      "shortDescription": "Lift state up and pass data/functions.",
      "longDescription": "Implement communication between sibling components using a common parent. Pass state and callbacks via props.",
      "topic": "React - Component Architecture",
      "difficulty": "Medium",
      "timeEstimate": "30–40 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "9",
      "dayChallenge": "Day 9",
      "title": "Basic Routing",
      "shortDescription": "Use `react-router-dom` for navigation.",
      "longDescription": "Install and use `react-router-dom` to create multiple pages. Set up `BrowserRouter`, `Routes`, and `Route` components.",
      "topic": "React Router",
      "difficulty": "Medium",
      "timeEstimate": "30–40 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "10",
      "dayChallenge": "Day 10",
      "title": "404 Page & Navigation",
      "shortDescription": "Add a NotFound route and nav links.",
      "longDescription": "Add a 404 Not Found route and create a basic navbar with `Link` or `NavLink`. Improve navigation UX.",
      "topic": "React Router",
      "difficulty": "Medium",
      "timeEstimate": "30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "11",
      "dayChallenge": "Day 11",
      "title": "List Rendering",
      "shortDescription": "Render lists using `.map()`.",
      "longDescription": "Take an array of data and display it dynamically using `map()`. Assign keys to items properly.",
      "topic": "List & Keys",
      "difficulty": "Easy",
      "timeEstimate": "20 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "12",
      "dayChallenge": "Day 12",
      "title": "Conditional Rendering",
      "shortDescription": "Render elements conditionally.",
      "longDescription": "Use conditional statements like `&&`, `?:`, or ternary operators to render different elements based on state or props.",
      "topic": "Conditional Rendering",
      "difficulty": "Easy",
      "timeEstimate": "25 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "13",
      "dayChallenge": "Day 13",
      "title": "Forms & Inputs",
      "shortDescription": "Create a form with input fields.",
      "longDescription": "Build a form with controlled inputs and handle form submission. Validate inputs and update the component state.",
      "topic": "Forms in React",
      "difficulty": "Medium",
      "timeEstimate": "30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "14",
      "dayChallenge": "Day 14",
      "title": "Form Validation",
      "shortDescription": "Add validation to form fields.",
      "longDescription": "Use custom logic or libraries like Yup or Formik to validate form fields. Show error messages and disable submission if invalid.",
      "topic": "Forms & Validation",
      "difficulty": "Medium",
      "timeEstimate": "35 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "15",
      "dayChallenge": "Day 15",
      "title": "React Fragments",
      "shortDescription": "Use React Fragments to group elements.",
      "longDescription": "Learn how to use `<React.Fragment>` or shorthand `<>` `</>` to return multiple elements without adding extra nodes to the DOM.",
      "topic": "JSX & Rendering",
      "difficulty": "Easy",
      "timeEstimate": "15 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "16",
      "dayChallenge": "Day 16",
      "title": "Styling in React",
      "shortDescription": "Style components using various methods.",
      "longDescription": "Explore inline styles, CSS Modules, and styled-components to apply styles to your React components.",
      "topic": "Styling Components",
      "difficulty": "Medium",
      "timeEstimate": "30–40 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "17",
      "dayChallenge": "Day 17",
      "title": "useMemo Hook",
      "shortDescription": "Optimize performance with `useMemo`.",
      "longDescription": "Use `useMemo` to memoize expensive calculations and prevent unnecessary re-renders. Include a small demo with a slow function.",
      "topic": "React Hooks - useMemo",
      "difficulty": "Medium",
      "timeEstimate": "30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "18",
      "dayChallenge": "Day 18",
      "title": "React Icons & Search Box",
      "shortDescription": "Add a search input with an icon.",
      "longDescription": "Create a search input and place an icon inside it using absolute positioning or input adornments.",
      "topic": "UI/UX Components",
      "difficulty": "Easy",
      "timeEstimate": "20 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "19",
      "dayChallenge": "Day 19",
      "title": "Component Reusability",
      "shortDescription": "Make components reusable with props.",
      "longDescription": "Refactor your code to make components reusable by passing props dynamically. Demonstrate with Button or Card components.",
      "topic": "React Components",
      "difficulty": "Medium",
      "timeEstimate": "30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "20",
      "dayChallenge": "Day 20",
      "title": "React DevTools",
      "shortDescription": "Explore components using DevTools.",
      "longDescription": "Install React Developer Tools in your browser and use it to inspect React components, state, and props.",
      "topic": "Debugging Tools",
      "difficulty": "Easy",
      "timeEstimate": "15–20 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "21",
      "dayChallenge": "Day 21",
      "title": "Controlled vs Uncontrolled Components",
      "shortDescription": "Understand the difference between controlled and uncontrolled components.",
      "longDescription": "Create an input form using both controlled and uncontrolled components. Explore how state is managed differently.",
      "topic": "Forms in React",
      "difficulty": "Medium",
      "timeEstimate": "30–35 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "22",
      "dayChallenge": "Day 22",
      "title": "React Portals",
      "shortDescription": "Use React Portals to render components outside the DOM hierarchy.",
      "longDescription": "Create a modal or tooltip using React Portals. Understand how it helps with z-index and DOM placement issues.",
      "topic": "Advanced React",
      "difficulty": "Medium",
      "timeEstimate": "30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "23",
      "dayChallenge": "Day 23",
      "title": "React Performance Optimization",
      "shortDescription": "Optimize performance using memoization techniques.",
      "longDescription": "Learn how to use `React.memo`, `useMemo`, and `useCallback` to prevent unnecessary re-renders.",
      "topic": "Performance",
      "difficulty": "Hard",
      "timeEstimate": "40–45 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "24",
      "dayChallenge": "Day 24",
      "title": "React Error Boundaries",
      "shortDescription": "Handle UI errors gracefully using Error Boundaries.",
      "longDescription": "Implement a class component to catch JavaScript errors in child components and display a fallback UI.",
      "topic": "Error Handling",
      "difficulty": "Medium",
      "timeEstimate": "30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "25",
      "dayChallenge": "Day 25",
      "title": "Building a Theme Toggle",
      "shortDescription": "Create a light/dark mode toggle for your app.",
      "longDescription": "Use React state and conditional classNames to build a reusable theme switcher component.",
      "topic": "UI Components",
      "difficulty": "Easy",
      "timeEstimate": "25 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "26",
      "dayChallenge": "Day 26",
      "title": "React Testing with RTL",
      "shortDescription": "Write tests using React Testing Library.",
      "longDescription": "Learn how to write unit and integration tests for your components using RTL and Jest.",
      "topic": "Testing",
      "difficulty": "Hard",
      "timeEstimate": "45–60 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "27",
      "dayChallenge": "Day 27",
      "title": "Redux Basics",
      "shortDescription": "Manage global state using Redux.",
      "longDescription": "Set up Redux in a React project. Create actions, reducers, and use the store to manage global state.",
      "topic": "Redux",
      "difficulty": "Hard",
      "timeEstimate": "50 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/redux/redux-original.svg",
      "status": "Not Started"
    },
    {
      "id": "28",
      "dayChallenge": "Day 28",
      "title": "Redux Thunk for Async",
      "shortDescription": "Use Redux Thunk middleware for async actions.",
      "longDescription": "Call an API using Redux Thunk, dispatch loading and success/error actions, and update the global store accordingly.",
      "topic": "Redux - Async",
      "difficulty": "Hard",
      "timeEstimate": "50–60 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/redux/redux-original.svg",
      "status": "Not Started"
    },
    {
      "id": "29",
      "dayChallenge": "Day 29",
      "title": "React Context API",
      "shortDescription": "Share data using the Context API.",
      "longDescription": "Use React Context to avoid prop drilling. Create a context provider for theme or auth and use it in child components.",
      "topic": "React Context",
      "difficulty": "Medium",
      "timeEstimate": "30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    },
    {
      "id": "30",
      "dayChallenge": "Day 30",
      "title": "Deploy React App",
      "shortDescription": "Deploy your React app to GitHub Pages or Vercel.",
      "longDescription": "Learn how to build and deploy your React project using GitHub Pages, Vercel, or Netlify. Configure routes and 404 pages.",
      "topic": "Deployment",
      "difficulty": "Easy",
      "timeEstimate": "20–30 mins",
      "icon": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
      "status": "Not Started"
    }
  ]
}